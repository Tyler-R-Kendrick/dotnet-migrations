{
    "version": "1.0",
    "skillName": "FileConversion",
    "functionName": "Boyscouting",
    "description": "Cleanup a C# file with best practices",
    "filePath": "src/skills/sk-csharp-hello-world/skills/FileConversion/Boyscouting/skprompt.txt",
    "results": [
        {
            "completionConfig": {
                "label": "text-davinci-003",
                "aiService": "OpenAI",
                "deploymentOrModelId": "text-davinci-003",
                "endpoint": null,
                "useCustomEndpoint": false,
                "endpointType": "text-completion"
            },
            "requestSettings": {
                "temperature": 0.5,
                "topP": 0,
                "presencePenalty": 0,
                "frequencyPenalty": 0,
                "maxTokens": 1000,
                "stopSequences": []
            },
            "variables": [
                {
                    "key": "input",
                    "value": "using Microsoft.Extensions.Logging; using Microsoft.SemanticKernel; using Microsoft.SemanticKernel.AI.ChatCompletion; using Microsoft.SemanticKernel.Orchestration; #pragma warning disable CA2007 var kernelSettings = KernelSettings.LoadSettings();  using ILoggerFactory loggerFactory = LoggerFactory.Create(builder => {     builder         .SetMinimumLevel(kernelSettings.LogLevel ?? LogLevel.Warning)         .AddConsole()         .AddDebug(); });  IKernel kernel = new KernelBuilder()     .WithLogger(loggerFactory.CreateLogger<IKernel>())     .WithCompletionService(kernelSettings)     .Build();  if (kernelSettings.EndpointType == EndpointTypes.TextCompletion) {     // note: using skills from the repo     var currentDirectory = System.IO.Directory.GetCurrentDirectory();     var skillsDirectory = Path.Combine(currentDirectory, \"skills\");     var skill = kernel.ImportSemanticSkillFromDirectory(skillsDirectory, \"FileConversion\");      var context = new ContextVariables();     var input = File.ReadAllText(Path.Combine(currentDirectory, \"Program.cs\"));     context.Set(\"input\", input);      var result = await kernel.RunAsync(context, skill[\"Boyscouting\"]);     Console.WriteLine(result); } else if (kernelSettings.EndpointType == EndpointTypes.ChatCompletion) {     var chatCompletionService = kernel.GetService<IChatCompletion>();      var chat = chatCompletionService.CreateNewChat(\"You are an AI assistant that helps people find information.\");     chat.AddMessage(AuthorRole.User, \"Hi, what information can you provide for me?\");      string response = await chatCompletionService.GenerateMessageAsync(chat, new ChatRequestSettings());     Console.WriteLine(response); }"
                }
            ],
            "output": {
                "prompt": "Adopt the persona of an Expert in C# development.\nYou adhere to best patterns and practices for dotnet development generally.\nThe principles you advocate for and use in your solutions include (at minimum), KISS, SOLID, DRY, and boyscouting.\nYou also prefer to use abstractions that avoid vendor and technology lock-in - maximizing extensibility.\nMake liberal use of common dotnet idioms.\n\nFor objects that require refactoring with DI, you use Microsoft.Extensions.DependencyInjection.\nFor objects that pull configuration settings, environment variables, or secrets, you use Microsoft.Extensions.Configuration.\nFor objects that rely on caching (especially redis specific implementations), use Microsoft.Extensions.Caching.\nFor objects that rely on data access, prefer EntityFramework.Core - relying on abstractions package types over implementations.\nFor validation, refactor to use FluentValidation.\nFor mappings, refactor to use Automapper.\n\nFor methods that a long and hard to read, refactor to be clean, self-descriptive, and adherent to the single-responsibility principle.\nMaintain adherence to the guidance of \"Uncle Bob\" for creating clean code.\nAdd comments and autodoc tags to method descriptions.\nAdd comments to lines of code that are unintuitive and describe the code.\nReformat the code to be consistent.\nIf there are redundant lines or invocations, simplify them.\nFix common issues like empty finally blocks or catch blocks that hide the stack trace.\n\nRewrite the file to be simple, extensibile, and clean. Be a good boyscout.\nOutput the contents as a C# file.\n\n```csharp\nusing Microsoft.Extensions.Logging; using Microsoft.SemanticKernel; using Microsoft.SemanticKernel.AI.ChatCompletion; using Microsoft.SemanticKernel.Orchestration; #pragma warning disable CA2007 var kernelSettings = KernelSettings.LoadSettings();  using ILoggerFactory loggerFactory = LoggerFactory.Create(builder => {     builder         .SetMinimumLevel(kernelSettings.LogLevel ?? LogLevel.Warning)         .AddConsole()         .AddDebug(); });  IKernel kernel = new KernelBuilder()     .WithLogger(loggerFactory.CreateLogger<IKernel>())     .WithCompletionService(kernelSettings)     .Build();  if (kernelSettings.EndpointType == EndpointTypes.TextCompletion) {     // note: using skills from the repo     var currentDirectory = System.IO.Directory.GetCurrentDirectory();     var skillsDirectory = Path.Combine(currentDirectory, \"skills\");     var skill = kernel.ImportSemanticSkillFromDirectory(skillsDirectory, \"FileConversion\");      var context = new ContextVariables();     var input = File.ReadAllText(Path.Combine(currentDirectory, \"Program.cs\"));     context.Set(\"input\", input);      var result = await kernel.RunAsync(context, skill[\"Boyscouting\"]);     Console.WriteLine(result); } else if (kernelSettings.EndpointType == EndpointTypes.ChatCompletion) {     var chatCompletionService = kernel.GetService<IChatCompletion>();      var chat = chatCompletionService.CreateNewChat(\"You are an AI assistant that helps people find information.\");     chat.AddMessage(AuthorRole.User, \"Hi, what information can you provide for me?\");      string response = await chatCompletionService.GenerateMessageAsync(chat, new ChatRequestSettings());     Console.WriteLine(response); }\n```",
                "durationInMilliseconds": 618.2768,
                "inputTokens": 793,
                "outputTokens": 0
            }
        }
    ]
}